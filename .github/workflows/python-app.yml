# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
    paths: [ '**/*.py' ]
  pull_request:
    branches: [ "main" ]
    paths: [ '**/*.py' ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.7","3.8","3.9", "3.10" ]


    steps:
      -
        uses: actions/checkout@v4
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      -
        name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      -
        name: Analysing heatmaps with pylint
        run: |
          pylint heatmaps --exit-zero
      -
        name: Analysing chmutils with pylint
        run: |
          pylint chmutils --exit-zero
      -
        name: Analysing chmengine with pylint
        run: |
          pylint chmengine --exit-zero
      -
        name: Analysing tooltips with pylint
        run: |
          pylint tooltips --exit-zero
      -
        name: Analysing main.py with pylint
        run: |
          pylint main.py --exit-zero
      -
        name: Analysing tests with pylint
        run: |
          pylint tests --exit-zero
      -
        name: Get list of changed Python files
        id: changes
        run: |
          git fetch origin main
          CHANGED=$(git diff --name-only origin/main...HEAD -- '*.py' | paste -sd ' ' -)
          echo "Changed files: $CHANGED"
          echo "changed_files=$CHANGED" >> "$GITHUB_OUTPUT"

      -
        name: Run affected unit tests
        if: steps.changes.outputs.changed_files != ''
        run: |
          python .github/scripts/scripts_analyze_dependencies.py "${{ steps.changes.outputs.changed_files }}" | while read test_file; do
            echo "Running $test_file"
            python -m unittest "$test_file"
          done
